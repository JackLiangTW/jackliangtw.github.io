<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on Jack Liang&#39;s portfolio and blog</title>
    <link>https://jackliangtw.github.io/tags/typescript/</link>
    <description>Recent content in TypeScript on Jack Liang&#39;s portfolio and blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://jackliangtw.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript:Extends vs implements</title>
      <link>https://jackliangtw.github.io/blog/typescript_extends_vs_implement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/typescript_extends_vs_implement/</guid>
      <description>Typescript中的extends, implements使用時機與範例: implements: 實現介面(定義類別結構) 只有class可以使用, 後面可以接type, interface, class
type cccT = { name:string } interface cccI{ age:number } class cccC{ info:string } class cccAll implements cccT, cccI, cccC { name = &amp;#34;Jack&amp;#34;; age = 11; info = &amp;#34;Hi&amp;#34; } const use = new cccAll(); console.log(use); //- { name: &amp;#39;Jack&amp;#39;, age: 11, info: &amp;#39;Hi&amp;#39; } extends: (類)繼承, (實現介面)擴展 介面擴展:只有interface, class能使用, type 擴展只能用 &amp;amp;,|
class(類)繼承:eg:classA extends classB{}
type cccT = { name:string } interface cccI{ age:number } class cccC{ info:string } interface newInter1 extends cccT, cccI, cccC{ //- interface可以擴展 with 三個介面 more:string } const vvvv1: newInter1 = { name: &amp;#34;Jane&amp;#34;, age: 33, info: &amp;#34;Good&amp;#34;, more: &amp;#34;nothing&amp;#34; }; console.</description>
    </item>
    
    <item>
      <title>TypeScript:型別註記模式</title>
      <link>https://jackliangtw.github.io/blog/typescript_type-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/typescript_type-annotation/</guid>
      <description>type: 型別(結構) 主要用來定義靜態格式, 會使用交叉型別（Intersection）和聯合型別（Union）來擴充
type Person = { name: string; age: number; }; type Student = { name: string; age: number; grade: string; }; // StudentPerson要符合(Person, Student)兩型別所有屬性 type StudentPerson = Person &amp;amp; Student; // 至少要完全符合(Person, Student)其中一種型別, 其他部分符合也可接受 type StudentPerson2 = Person | Student; interface: 介面(類別結構) 主要用來定義物件結構
type TestType = { info: string; } interface Person { name: string; age: number; } //- 使用extends擴充介面 interface Student extends Person { grade: string; } //- interface也可以擴充type interface Student2 extends TestType { grade: string; } const student: Student = { name: &amp;#34;Bob&amp;#34;, age: 22, grade: &amp;#34;B&amp;#34; }; const student2: Student2 = { grade: &amp;#34;B&amp;#34;, info: &amp;#34;Come from Taiwan&amp;#34; }; class: 類, 類介面 class可以當作 類, 或是介面使用</description>
    </item>
    
  </channel>
</rss>
