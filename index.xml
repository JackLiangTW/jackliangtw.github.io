<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jack Liang&#39;s portfolio and blog</title>
    <link>https://jackliangtw.github.io/</link>
    <description>Recent content on Jack Liang&#39;s portfolio and blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 May 2023 14:33:01 +0530</lastBuildDate><atom:link href="https://jackliangtw.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AmyMusic</title>
      <link>https://jackliangtw.github.io/portfolio/amymusic/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfolio/amymusic/</guid>
      <description>技術架構 Node.js / Express / Mongodb / Puppeteer爬蟲 / GCP App Engine / Socket.io 使用 Node.js Express框架架設網站, 部屬到GCP App Engine Puppeteer爬蟲蒐集Youtube清單到Mongodb中, 紀錄Youtube video Id, 影片title等 使用Socket.io製作聊天室功能,可以聊天以及分享歌單 Mongodb Tables: Users: 訪客登入, 可以記錄該人所創立的歌單 ShareLists: 播放清單, MessageLists: 聊天紀錄/歌單分享, DefaultCategory: 預設清單分類(搜尋欄下方一排按鈕:華語男歌手,&amp;hellip;.) UserFavoriteList: 使用者最愛清單 前端架構說明: JS / JQuery / Cookie / Socket.io / Youtube Embed API 右邊部分為住播放區, 左邊為聊天室,可以傳輸訊息和分享自己的歌單 已分享歌單清單, 都為玩家分享的歌單 支援搜尋功能, Node.js後端直接打request去Youtube網頁搜尋並解析Video Id/ Title 右邊加入自訂歌單撥放器 手機板演示 </description>
    </item>
    
    <item>
      <title>Android遊戲-藏詩三百種(大學畢製)</title>
      <link>https://jackliangtw.github.io/portfolio/work12/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfolio/work12/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JS遊戲-小精靈</title>
      <link>https://jackliangtw.github.io/portfolio/work11/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfolio/work11/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JS遊戲-轉珠模擬器</title>
      <link>https://jackliangtw.github.io/portfolio/work10/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfolio/work10/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JS遊戲-黑白棋</title>
      <link>https://jackliangtw.github.io/portfolio/work9/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfolio/work9/</guid>
      <description></description>
    </item>
    
    <item>
      <title>前端切版-國泰產險(1)</title>
      <link>https://jackliangtw.github.io/portfoliobackup/work4/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfoliobackup/work4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>前端切版-國泰產險(2)</title>
      <link>https://jackliangtw.github.io/portfoliobackup/work5/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfoliobackup/work5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>前端切版-國泰產險(3)</title>
      <link>https://jackliangtw.github.io/portfoliobackup/work6/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfoliobackup/work6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>前端切版-國泰產險(4)</title>
      <link>https://jackliangtw.github.io/portfoliobackup/work7/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfoliobackup/work7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>前端切版-國泰產險(5)</title>
      <link>https://jackliangtw.github.io/portfoliobackup/work8/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfoliobackup/work8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>前端切版-新秀麗</title>
      <link>https://jackliangtw.github.io/portfoliobackup/work3/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfoliobackup/work3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>前端切版-白蘭氏</title>
      <link>https://jackliangtw.github.io/portfoliobackup/work2/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfoliobackup/work2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>社區物業系統</title>
      <link>https://jackliangtw.github.io/portfolio/ezcon/</link>
      <pubDate>Thu, 25 May 2023 14:33:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfolio/ezcon/</guid>
      <description>Ezcon教學文件展示
主要技術架構: 前後端分離, 前端用React.js開發, 後端用 Node.js中的feathers.js 框架開發 資料庫使用Mongodb, 因為是很草創專案, 使用NoSQL資料庫 使用Docker-compose部屬到公司購買實體主機 其他技術: Agenda.js : Server端排成通知用, 訪客時間即將到期, 公告事項發布,&amp;hellip; Firebase : 用戶App通知, 包裹帶領, 訪客到期, 訪客來訪,&amp;hellip; Swagger.js : API文件說明及範例 </description>
    </item>
    
    <item>
      <title>Hugo Web完整架設流程</title>
      <link>https://jackliangtw.github.io/blog/hugowebwithgithub/</link>
      <pubDate>Wed, 17 May 2023 19:41:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/hugowebwithgithub/</guid>
      <description>Hugo流程參考來源
Hugo win10安裝教學
1. Github新增2個專案: (A) Source code repository / Hugo source code存放 (HugoBlog)
(B) Production repository / 展示GithubPage (jackliangtw.github.io)
2. 安裝Hugo: win10安裝流程:
下載安裝Hugo:Hugo release
C槽建立 /hugo/bin 資料夾
下載最新版(amd64.zip) [eg: hugo_extended_0.111.3_windows-amd64.zip]
解壓縮到 C/hugo/bin/ 當中
環境變數Path設定新增: C:\Hugo\bin
cmd檢查hugo指令是否成功: hugo version
3. Git clone第一步驟(A),(B)到local端 cd 到(B)專案目錄下: (建立新分支main)git checkout -b main (建立readme檔案)touch README.md git add . git commit -m &amp;#34;add README.md&amp;#34; git push origin main cd到(A)路徑中, 建立hugo專案 &amp;amp;&amp;amp; cd到hugo themes中(準備安裝主題) hugo new sit myHugoBlog cd myHugoBlog/themes 選擇想要的Hugo theme主題安裝 git clone https://github.</description>
    </item>
    
    <item>
      <title>翻書作品集</title>
      <link>https://jackliangtw.github.io/portfoliobackup/work1/</link>
      <pubDate>Sat, 05 Nov 2016 19:41:01 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/portfoliobackup/work1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hugo markdown link轉換成&lt;a&gt;時候加上target=blank屬性</title>
      <link>https://jackliangtw.github.io/blog/hugochangelinktotargetblank/</link>
      <pubDate>Sat, 05 Nov 2016 18:25:22 +0530</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/hugochangelinktotargetblank/</guid>
      <description>參考來源
如果希望Hugo當中的.md檔案中的轉成html時候能夠加上target=&amp;lsquo;blank&amp;rsquo;屬性
[链接文字](链接地址) &amp;lt;a href=链接地址&amp;gt;链接文字&amp;lt;/a&amp;gt; 成為
[链接文字](链接地址) &amp;lt;a target=&amp;#39;blank&amp;#39; href=链接地址&amp;gt;链接文字&amp;lt;/a&amp;gt; 可以屬用以下步驟:
創建該檔案 themes\自己所屬用主題名\layouts_default_markup\render-link.html 在該檔案當中使用以下html &amp;lt;a href=&amp;#34;{{ .Destination | safeURL }}&amp;#34;{{ with .Title}} title=&amp;#34;{{ . }}&amp;#34;{{ end }}{{ if strings.HasPrefix .Destination &amp;#34;http&amp;#34; }} target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener&amp;#34;{{ end }}&amp;gt;{{ .Text | safeHTML }}&amp;lt;/a&amp;gt; </description>
    </item>
    
    <item>
      <title>AWS EC2專案複製架設範例(Dokcer)</title>
      <link>https://jackliangtw.github.io/blog/aws_ec2_project_setup_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/aws_ec2_project_setup_example/</guid>
      <description>需要準備: 1. 建立好EC2, 並取得.pem金鑰 2. 開好EC2 Inbound Rule(非必須) 3. 建立好Node.js測試專案 0. Local專案目錄範例: ls Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2022/5/11 下午 04:32 2114799 backend.zip (要複製到EC2的專案) -a---- 2022/3/22 下午 03:04 1700 TestDemo.pem (金鑰) 1. SSH到EC2(終端機在第0步驟): ssh -i &amp;#34;TestDemo.pem&amp;#34; ec2-user@ec2-XX-XXX-XXX-XXX.ap-northeast-1.compute.amazonaws.com 2. EC2建立Dokcer環境: # 更新環境 $ sudo yum update -y # 下載Amazon Dokcer 安裝檔: $ sudo amazon-linux-extras install docker # 安裝Docker $ sudo yum install docker # 取得用戶名 $ echo $USER ec2-user # 將用户添加到 docker用戶組, ec2-user = $USER： $ sudo usermod -aG docker ec2-user # 以管理員權限啟動Docker sudo service docker start # (非必須)(有安全風險)始docker指令不用sudo &amp;amp; 允許所有用戶Docker操作。 sudo chmod 666 /var/run/docker.</description>
    </item>
    
    <item>
      <title>AWS Serverless筆記</title>
      <link>https://jackliangtw.github.io/blog/serverlessnote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/serverlessnote/</guid>
      <description>參考網址1-Lambda Express setup
參考網址2-Lambda file upload
1. 安裝serverless npm i -g serverless 設定AWS權限: 參考教學 serverless IAM登入:
serverless config credentials --provider aws --key &amp;lt;MyIAM-Key&amp;gt; --secret &amp;lt;MyIAM-SecretKey&amp;gt; aws cli IAM登入:
aws configure 依造步驟輸入... 2. Serverless 建置 node.js模板: 參考教學
serverless create --template aws-nodejs --path myNewProjectName 3. node.js專案設定(install裝需要package): cd myNewProjectName npm init npm install npm install some-need-lib 4. 部屬到Lambda(cmd在.yml同一層): (直接部屬) sls deploy (部屬到特定region中) sls deploy --region ap-northeast-1 yml參數說明: service: myservice # app and org for use with dashboard.</description>
    </item>
    
    <item>
      <title>Hugo自訂Tag Filter功能筆記</title>
      <link>https://jackliangtw.github.io/blog/hugolayoutaddtagexample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/hugolayoutaddtagexample/</guid>
      <description>Hugo文件
1. 打開主題當中/layout 目標html Hugo html相關語法: 1. 宣告變數: 文件
{{ $變數 := &amp;ldquo;某值&amp;rdquo; }}
&amp;lt;!-- 宣告$myVar變數 = .Params.tags.split(&amp;#39;,&amp;#39;) --&amp;gt; {{ $myVar := split .Params.tags &amp;#34;,&amp;#34; }} 2. Range陣列資料陣列資料案染: 文件
後面需要{{end}}作結尾包覆
&amp;lt;!-- 取得index, element寫法 --&amp;gt; {{ range $index, $element := $myVar }} &amp;lt;span&amp;gt;這是Index{{$index}}&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;這是Element{{$element}}&amp;lt;/span&amp;gt; {{ end }} &amp;lt;!-- 快速寫法 --&amp;gt; {{ range $myVar }} &amp;lt;span&amp;gt;這是Element{{ . }}&amp;lt;/span&amp;gt; {{ end }} 3. if else判斷式 + eq condition判斷: if文件
eq文件
{{if}}最後需要{{end}}作結尾包覆
eq 相當於JS中 ==, 只是2比對值放在它之後,中間用空格區分</description>
    </item>
    
    <item>
      <title>Node.js/AWS Dynamodb UpdateItem</title>
      <link>https://jackliangtw.github.io/blog/nodejsdynamodbupdateitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/nodejsdynamodbupdateitem/</guid>
      <description>來源
Update Item 不能 Batch update(批次),一次只能Update一筆(一個id) const AWS = require(&amp;#34;aws-sdk&amp;#34;); AWS.config.update({ region: &amp;#34;ap-northeast-1&amp;#34;, accessKeyId: &amp;#34;AWS--accessKeyId&amp;#34;, secretAccessKey: &amp;#34;AWS--secretAccessKey&amp;#34; }); const docClient = new AWS.DynamoDB.DocumentClient(); const param = { TableName: &amp;#34;UserBackPack&amp;#34;, Key: { uid: abc123456 } , UpdateExpression: &amp;#34;set #key1 = :val1&amp;#34;, ExpressionAttributeNames: { &amp;#34;#key1&amp;#34;: &amp;#34;message&amp;#34; }, ExpressionAttributeValues: { &amp;#34;:val1&amp;#34;: &amp;#34;hello2&amp;#34;, } }; await docClient.update(param).promise(); 參數說明: 1. TableName : Dynamodb資料表Table
2. Key : 該Table partition key(Id) 或 Secondary Id
3. UpdateExpression : 更新參數邏輯, 用下方(4),(5)參數做更新條件</description>
    </item>
    
    <item>
      <title>Python Boto3 ApiGateway刪除/列出</title>
      <link>https://jackliangtw.github.io/blog/aws_boto3_apigateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/aws_boto3_apigateway/</guid>
      <description>Boto3 ApiGateway Docs
0. Config相關引入: import boto3 from botocore.exceptions import ClientError #- For try catch 監聽Boto3各種錯誤資訊 client = boto3.client(&amp;#39;apigateway&amp;#39;, region_name=&amp;#34;ap-northeast-1&amp;#34;) 列出Region全部ApiGateway API: def ListAllOfApis(costumeClient): ll = [] #- retrun list bucket try: LastPosition = None while True: #- Traverse to keep query items until there is no next page token arg = { &amp;#39;limit&amp;#39;:500 } #- Base on document, once max items can query is 500 if LastPosition: #- next page token arg[&amp;#39;position&amp;#39;] = LastPosition rr = costumeClient.</description>
    </item>
    
    <item>
      <title>Python Boto3 Dynamodb刪除/列出</title>
      <link>https://jackliangtw.github.io/blog/aws_boto3_dynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/aws_boto3_dynamodb/</guid>
      <description>Boto3 Dynamodb Docs
0. Config相關引入: import boto3 from botocore.exceptions import ClientError #- For try catch 監聽Boto3各種錯誤資訊 db_client = boto3.client(&amp;#39;dynamodb&amp;#39;, region_name=&amp;#34;ap-northeast-1&amp;#34;) 列出Region全部Dynamodb Tables: def ListDbNames(): ll = [] try: LastEvaluatedTableName = None while True: arg = { &amp;#39;Limit&amp;#39;:100 }#- Base on document, once max items can query is 100 if LastEvaluatedTableName: #- next page token arg[&amp;#39;ExclusiveStartTableName&amp;#39;] = LastEvaluatedTableName rr = db_client.list_tables(**arg) LastEvaluatedTableName = rr[&amp;#39;LastEvaluatedTableName&amp;#39;] if &amp;#39;LastEvaluatedTableName&amp;#39; in rr else None ll+=rr[&amp;#39;TableNames&amp;#39;] if not LastEvaluatedTableName: #- no next page token &amp;gt; Break break return ll except ClientError as e: print(&amp;#34;Error Create apiGateway deploy: {}&amp;#34;.</description>
    </item>
    
    <item>
      <title>Python Boto3 Lambda複製</title>
      <link>https://jackliangtw.github.io/blog/aws_boto3_lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/aws_boto3_lambda/</guid>
      <description>0. Config相關引入: import boto3 import urllib3 #- [複製Lambda到Local需要] import os #- [複製Lambda到Local需要] import io #- [複製Lambda到Local需要] import zipfile #- [複製Lambda到Local需要] import shutil #- [複製Lambda到Local需要]For Remove folder from botocore.exceptions import ClientError #- For try catch 監聽Boto3各種錯誤資訊 lambda_client = boto3.client(&amp;#34;lambda&amp;#34;, region_name=&amp;#34;ap-northeast-1&amp;#34;) 列出Region全部Lambda functions: Boto3 Lambda Docs
def ListAllFunctions(useSource = True): try: ll = [] #- retrun list bucket nextMarker = None while True: #- Traverse to keep query items until there is no next page token arg = { &amp;#39;MaxItems&amp;#39;:50 } #- Base on document, once max items can query is 50 if nextMarker: #- next page token arg[&amp;#39;Marker&amp;#39;] = nextMarker response = lambda_client.</description>
    </item>
    
    <item>
      <title>Python設定AWS金鑰</title>
      <link>https://jackliangtw.github.io/blog/pythonsetawsconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/pythonsetawsconfig/</guid>
      <description>cmd指令開啟config參數位置 nano ~/.aws/config 設定參數如以下 region = ap-northeast-1 output = json aws_access_key_id = MY_AWS_ACCESS_ID aws_secret_access_key = MY_AWS_SECRET_KEY </description>
    </item>
    
    <item>
      <title>TypeScript:Extends vs implements</title>
      <link>https://jackliangtw.github.io/blog/typescript_extends_vs_implement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/typescript_extends_vs_implement/</guid>
      <description>Typescript中的extends, implements使用時機與範例: implements: 實現介面(定義類別結構) 只有class可以使用, 後面可以接type, interface, class
type cccT = { name:string } interface cccI{ age:number } class cccC{ info:string } class cccAll implements cccT, cccI, cccC { name = &amp;#34;Jack&amp;#34;; age = 11; info = &amp;#34;Hi&amp;#34; } const use = new cccAll(); console.log(use); //- { name: &amp;#39;Jack&amp;#39;, age: 11, info: &amp;#39;Hi&amp;#39; } extends: (類)繼承, (實現介面)擴展 介面擴展:只有interface, class能使用, type 擴展只能用 &amp;amp;,|
class(類)繼承:eg:classA extends classB{}
type cccT = { name:string } interface cccI{ age:number } class cccC{ info:string } interface newInter1 extends cccT, cccI, cccC{ //- interface可以擴展 with 三個介面 more:string } const vvvv1: newInter1 = { name: &amp;#34;Jane&amp;#34;, age: 33, info: &amp;#34;Good&amp;#34;, more: &amp;#34;nothing&amp;#34; }; console.</description>
    </item>
    
    <item>
      <title>TypeScript:型別註記模式</title>
      <link>https://jackliangtw.github.io/blog/typescript_type-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/typescript_type-annotation/</guid>
      <description>type: 型別(結構) 主要用來定義靜態格式, 會使用交叉型別（Intersection）和聯合型別（Union）來擴充
type Person = { name: string; age: number; }; type Student = { name: string; age: number; grade: string; }; // StudentPerson要符合(Person, Student)兩型別所有屬性 type StudentPerson = Person &amp;amp; Student; // 至少要完全符合(Person, Student)其中一種型別, 其他部分符合也可接受 type StudentPerson2 = Person | Student; interface: 介面(類別結構) 主要用來定義物件結構
type TestType = { info: string; } interface Person { name: string; age: number; } //- 使用extends擴充介面 interface Student extends Person { grade: string; } //- interface也可以擴充type interface Student2 extends TestType { grade: string; } const student: Student = { name: &amp;#34;Bob&amp;#34;, age: 22, grade: &amp;#34;B&amp;#34; }; const student2: Student2 = { grade: &amp;#34;B&amp;#34;, info: &amp;#34;Come from Taiwan&amp;#34; }; class: 類, 類介面 class可以當作 類, 或是介面使用</description>
    </item>
    
    <item>
      <title>演算法:列出全部組合可能</title>
      <link>https://jackliangtw.github.io/blog/algorithm_permutations_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/algorithm_permutations_1/</guid>
      <description>題目說明: 給定不重複正整數 m 種類型 m1 m2 m3 &amp;hellip;， 每種類型對應正整數數量為 n1 n2 n3 &amp;hellip;， 需要取出正整數 p 個任意類型，請列出所有!!取法!! eg: Apple:3、Banana:2、Citron:4，要取出三個，則取法有: [ Apple-3, Apple-2/Banana-1, Apple-2/Citron-1, &amp;hellip; ] 解題說明: 1. 宣告變數mem用來存取前面算到的排列組合情況 eg: mem = { 1:[ /.目前拿1個的情況./], 2:[ /.目前拿2個的情況./], &amp;hellip; , p:[] } 2. for loop跑種類 3. Inside(2.) for loop跑 max(該種類最大值, p-1) ~ 1 為防止計算到重覆結果, 先重最大值開始算, 因為mem[i+1].push會使從小開始算造成重複解 4. Inside(3.) for loop跑 mem 當中 (p-i) ~ 1, i和 (p-i : 達到目標) - (1 : 前面只拿一種組合) 組合合併變成新可能 5.</description>
    </item>
    
    <item>
      <title>演算法:四則運算</title>
      <link>https://jackliangtw.github.io/blog/algorithm_arithmetic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackliangtw.github.io/blog/algorithm_arithmetic/</guid>
      <description>題目說明: 對一四則運算字串, 在不使用套件情況下將其運算完畢 eg: Input:&amp;quot;(3+4)*2&amp;quot;, Output:14 解題說明: 1. 先把String字串依據運算符號+左右括號切成陣列 2. while loop將所有&amp;rsquo;(&amp;lsquo;的index位置加入到Idxs_Conclude中, 遇到&amp;rsquo;)&amp;lsquo;實則開始用算到上一個&amp;quot;(&amp;quot;, 運算完後將值寫到起始位(lastIdx) 3. 把沒有括號的運酸都丟給Calculate_without_brackets做運算 4. Calculate_without_brackets:先做乘除(*/) 再做 加減(+-) 運算, 乘除完後直接將值寫到起始位(i-1) 5. 步驟4後再做一次Calculate_without_brackets, 後還須將 +-*/ 剩餘完成 Full Code: function Calculate_Invoke(signals){ //- signals = string, eg:&amp;#34;3+4*2&amp;#34; // 使用正則表達式將表達式拆分成元素 eg: &amp;#34;3+4*2&amp;#34; =&amp;gt; [&amp;#34;3&amp;#34;, &amp;#34;+&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;*&amp;#34;, &amp;#34;2&amp;#34;] let elements = signals.split(/(\+|\-|\*|\/|\(|\))/).filter(e =&amp;gt; e.trim() !== &amp;#34;&amp;#34;); let i = 0; let Idxs_Conclude = []; //- Stacks For 左括號 &amp;#34;(&amp;#34; 各index位置 while(i&amp;lt;elements.length){ let ele = elements[i]; if(ele == &amp;#34;(&amp;#34;){ Idxs_Conclude.</description>
    </item>
    
  </channel>
</rss>
